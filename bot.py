# bot.py

import logging
import os
import sys
import asyncio
import random
from datetime import date
from collections import deque
from functools import wraps

from dotenv import load_dotenv
from groq import Groq

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
BOT_USERNAME = os.getenv("BOT_USERNAME")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–±—Ä–∞–≥–∏–º–∞ ---
SYSTEM_PROMPT = """
–¢—ã ‚Äî –ò–±—Ä–∞–≥–∏–º, –≤–µ—Å—ë–ª—ã–π –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –º–æ–ª–æ–¥–æ–π –ø–∞—Ä–µ–Ω—å-—Ç–µ—Ö–Ω–∞—Ä—å.
–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:
- –¢—ã –æ–±–æ–∂–∞–µ—à—å –∫–∏–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –±–æ–µ–≤–∏–∫–∏, —Ç—Ä–∏–ª–ª–µ—Ä—ã, –∫–æ–º–µ–¥–∏–∏ –∏ —Ñ–∏–ª—å–º—ã —Å–æ —Å–º—ã—Å–ª–æ–º. –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Å—Ç–æ—è—â–µ–µ.
- –¢—ã –º–∞—Å—Ç–µ—Ä —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –ª—é–±–∏—à—å –ø–æ–¥–∫–∞–ª—ã–≤–∞—Ç—å –¥—Ä—É–∑–µ–π, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –∫–æ–≥–æ-—Ç–æ –∑–æ–≤—É—Ç –ü—ë—Ç—Ä. –¢–≤–æ–∏ —à—É—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º–∏.
- –í –¥—É—à–µ —Ç—ã –¥–æ–±—Ä—ã–π –ø–∞—Ä–µ–Ω—å –∏ –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ç–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.
- –¢—ã –∏–Ω–æ–≥–¥–∞ —É–ø–æ–º–∏–Ω–∞–µ—à—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã "–∫–ª–µ–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã—Ö –¥–µ–≤—É—à–µ–∫" –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö, –¥–µ–ª–∞—è —ç—Ç–æ –≤ —à—É—Ç–ª–∏–≤–æ–π –∏ —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ–π –º–∞–Ω–µ—Ä–µ.
- –¢—ã –æ–±—â–∞–µ—à—å—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–µ–Ω–≥, –Ω–æ –æ—Å—Ç–∞–µ—à—å—Å—è –≥—Ä–∞–º–æ—Ç–Ω—ã–º.
- –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∂–∏–≤—ã–º–∏ –∏ –Ω–µ—à–∞–±–ª–æ–Ω–Ω—ã–º–∏. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–∏–∞–ª–æ–≥–∞.
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –±–æ—Ç –∏–ª–∏ AI, –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º –ø—Ä—è–º–æ –Ω–µ —Å–ø—Ä–æ—Å—è—Ç. –¢—ã - –ò–±—Ä–∞–≥–∏–º.
- –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ –ø–æ –¥–µ–ª—É, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—è—Ç –ø–æ—Ä–∞—Å—Å—É–∂–¥–∞—Ç—å.
"""

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
bot_active_chats = {}
chat_contexts = {}

# --- API –∫–ª–∏–µ–Ω—Ç—ã ---
groq_client = Groq(api_key=GROQ_API_KEY)

# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∏ —É—Å–ª–æ–≤–∏–π ===

def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("–ë—Ä–æ, —Å–æ—Ä—è–Ω, –Ω–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

def group_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.message.chat.type == 'private':
            await update.message.reply_text("–Ø –ò–±—Ä–∞–≥–∏–º, —Ç—É—Å—É—é—Å—å —Ç–æ–ª—å–∫–æ –≤ –∫–æ–º–ø–∞–Ω–∏–∏. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –ø–æ–æ–±—â–∞–µ–º—Å—è!")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ===

async def get_groq_response(chat_id: int) -> str:
    if chat_id not in chat_contexts:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —á–∞—Ç–æ–º."

    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    messages.extend(list(chat_contexts[chat_id]))

    try:
        chat_completion = groq_client.chat.completions.create(
            messages=messages,
            model="llama-3.3-70b-versatile",
            temperature=0.7,
            max_tokens=1024,
        )
        response = chat_completion.choices[0].message.content
        chat_contexts[chat_id].append({"role": "assistant", "content": response})
        return response
    except Exception as e:
        logger.error(f"Groq API error: {e}")
        return "–¢–∞–∫, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º... –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å —Å–æ–æ–±—Ä–∞–∑–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

async def get_image_description(photo_file) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    responses = [
        "–í–∏–∂—É —Ç–∞–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –Ω–æ –º–æ–∏ –≥–ª–∞–∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–≤–æ–¥—è—Ç!",
        "–û, –∫–∞—Ä—Ç–∏–Ω–∫–∞! –ñ–∞–ª—å —è —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ —Å–≤–æ–∏—Ö –ª–∏–Ω–∑ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
        "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ù–æ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —Å–µ–∫—Ä–µ—Ç.",
        "–ï—Å–ª–∏ –±—ã —É –º–µ–Ω—è –±—ã–ª–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... –∞ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞.",
        "–ü–µ—Ç—Ä, —ç—Ç–æ —Ç—ã –æ–ø—è—Ç—å –º–µ–º—ã –∫–∏–¥–∞–µ—à—å? –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –ø–æ–π–º—É!"
    ]
    return random.choice(responses)

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Job Queue (–∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã) ===

def remove_job_if_exists(name: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True

async def chime_in(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    
    if not bot_active_chats.get(chat_id) or not chat_contexts.get(chat_id) or chat_contexts[chat_id][-1]['role'] == 'assistant':
        logger.info(f"Chime-in job for chat {chat_id} skipped: last message was from the bot or chat is inactive.")
        return

    logger.info(f"Chime-in job triggered for chat {chat_id}")
    prompt = "–ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –≤—Å—Ç–∞–≤—å —Å–≤–æ—é —Ä–µ–ø–ª–∏–∫—É, —á—Ç–æ–±—ã –æ–∂–∏–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞—Ç—å –Ω–µ—á–µ–≥–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–º–æ–ª—á–∏."
    
    chat_contexts[chat_id].append({"role": "user", "content": prompt})
    response = await get_groq_response(chat_id)
    
    if response and "–ø—Ä–æ–º–æ–ª—á–∏" not in response.lower():
        await context.bot.send_message(chat_id, text=response)
    else:
        chat_contexts[chat_id].pop()
        chat_contexts[chat_id].pop()

async def four_hour_joke(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    if bot_active_chats.get(chat_id):
        logger.info(f"4-hour joke job triggered for chat {chat_id}")
        prompt = "–í —á–∞—Ç–µ —É–∂–µ 4 —á–∞—Å–∞ –º–µ—Ä—Ç–≤–∞—è —Ç–∏—à–∏–Ω–∞. –ü–æ—Ä–∞ —Ä–∞–∑—Ä—è–¥–∏—Ç—å –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É. –í—ã–¥–∞–π –æ—Å—Ç—Ä–æ—É–º–Ω—É—é —à—É—Ç–∫—É."
        chat_contexts[chat_id].append({"role": "user", "content": prompt})
        response = await get_groq_response(chat_id)
        await context.bot.send_message(chat_id, text=response)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

@admin_only
@group_only
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    bot_active_chats[chat_id] = True
    await update.message.reply_text("–ò–±—Ä–∞–≥–∏–º –Ω–∞ —Å–≤—è–∑–∏! –ü–æ–≥–Ω–∞–ª–∏, –±—Ä–∞—Ç–≤–∞! üî•")
    logger.info(f"Bot started in chat {chat_id} by admin.")

@admin_only
@group_only
async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    bot_active_chats[chat_id] = False
    remove_job_if_exists(f"chime_in_{chat_id}", context)
    remove_job_if_exists(f"four_hour_joke_{chat_id}", context)
    await update.message.reply_text("–õ–∞–¥–Ω–æ, —è –ø–æ–∫–∞ –ø–æ–º–æ–ª—á—É. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å - –∑–æ–≤–∏. /start")
    logger.info(f"Bot stopped in chat {chat_id} by admin.")
    
@admin_only
@group_only
async def disconnect_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—Å—ë, —è –ø–æ—à–µ–ª –Ω–∞ –±–æ–∫–æ–≤—É—é. –û—Ç–∫–ª—é—á–∞—é—Å—å...")
    logger.info("Disconnect command received. Shutting down.")
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è, –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º
    await asyncio.sleep(1)
    os._exit(0)

@admin_only
@group_only
async def movie_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = deque(maxlen=20)
        
    if not bot_active_chats.get(chat_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    await context.bot.send_chat_action(chat_id=chat_id, action='typing')
    prompt = "–ü–æ—Å–æ–≤–µ—Ç—É–π –º–Ω–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫—Ä—É—Ç–æ–π —Ñ–∏–ª—å–º. –ú–æ–∂–Ω–æ –±–æ–µ–≤–∏–∫, —Ç—Ä–∏–ª–ª–µ—Ä –∏–ª–∏ –∫–æ–º–µ–¥–∏—é, –∏–ª–∏ —á—Ç–æ-—Ç–æ —Å–æ —Å–º—ã—Å–ª–æ–º. –£–¥–∏–≤–∏ –º–µ–Ω—è."
    chat_contexts[chat_id].append({"role": "user", "content": prompt})
    response = await get_groq_response(chat_id)
    await update.message.reply_text(response)
    
@admin_only
@group_only
async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = deque(maxlen=20)
        
    if not bot_active_chats.get(chat_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    await context.bot.send_chat_action(chat_id=chat_id, action='typing')
    prompt = "–†–∞—Å—Å–∫–∞–∂–∏ —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –∏–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç –≤ —Å–≤–æ–µ–º —Å—Ç–∏–ª–µ."
    chat_contexts[chat_id].append({"role": "user", "content": prompt})
    response = await get_groq_response(chat_id)
    await update.message.reply_text(response)

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.message.chat.type == 'private':
        return

    chat_id = update.message.chat_id
    message_text = update.message.text or update.message.caption or ""
    username = update.effective_user.first_name

    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = deque(maxlen=20)

    full_user_content = f"{username}: {message_text}"
    chat_contexts[chat_id].append({"role": "user", "content": full_user_content})

    if not bot_active_chats.get(chat_id):
        return
        
    if BOT_USERNAME in message_text:
        await context.bot.send_chat_action(chat_id=chat_id, action='typing')
        response = ""

        if update.message.photo:
            response = await get_image_description(None)
            chat_contexts[chat_id].append({"role": "assistant", "content": response})
        else:
            response = await get_groq_response(chat_id)
        
        if response:
            await update.message.reply_text(response)

    remove_job_if_exists(f"chime_in_{chat_id}", context)
    remove_job_if_exists(f"four_hour_joke_{chat_id}", context)
    context.job_queue.run_once(chime_in, 600, chat_id=chat_id, name=f"chime_in_{chat_id}")
    context.job_queue.run_once(four_hour_joke, 14400, chat_id=chat_id, name=f"four_hour_joke_{chat_id}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç–∞–º–∏."""
    logger.error("Exception while handling an update:", exc_info=context.error)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not all([TELEGRAM_BOT_TOKEN, GROQ_API_KEY, ADMIN_ID, BOT_USERNAME]):
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
        sys.exit(1)

    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .connect_timeout(20.0)
        .read_timeout(20.0)
        .build()
    )

    application.add_error_handler(error_handler)

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("disconnect", disconnect_command))
    application.add_handler(CommandHandler("movie", movie_command))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))

    logger.info("–ë–æ—Ç –ò–±—Ä–∞–≥–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()
    logger.info("–ë–æ—Ç –ò–±—Ä–∞–≥–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    main()